#define _CRT_SECURE_NO_WARNINGS
#include"game2.h"
//初始化棋盘
void initboard(char board[ROW][COL], int row, int col) {
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++) {
		for (j = 0; j < col; j++) {
			board[i][j] = ' ';
		}
	}
}
//打印棋盘
void displayboard(char board[ROW][COL], int row, int col) {
	int i = 0;
	for (i = 0; i < row; i++) {
		//打印一行数据
		int j = 0;
		for (j = 0; j < col; j++) {
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		//打印分隔符
		if (i < row - 1) {
			for (j = 0; j < col; j++) {
				printf("---");
				if (j < col - 1)
					printf("|");
			}
			printf("\n");
		}

	}
}
void blayemove(char board[ROW][COL], int row, int col) {
	int x = 0;
	int y = 0;
	printf("玩家走：>\n");
	while (1) {
		printf("请输入要下的坐标：");
		scanf_s("%d%d", &x, &y);
		//判断下标合法性
		if (x >= 1 && x <= row && y >= 1 && y <= col) {
			if (board[x - 1][y - 1] == ' ') {
				board[x - 1][y - 1] = '*';
				break;//跳出后才能打印循环
			}
			else {
				printf("该坐标被占用\n");
			}
		}
		else {
			printf("坐标非法，请重新输入：\n");
		}
	}
}
void compultermove(char board[ROW][COL], int row, int col) {
	printf("该电脑啦\n");
	int x = 0;
	int y = 0;
	while(1) 
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y]==' ')//如果被占用了继续循环，在生成新的坐标
		{
			board[x][y] = '#';
			break;
		}
	}
}
//返回1满了返回0没满
int isfull(char board[ROW][COL], int row, int col) {
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++) {
		for (j = 0; j < col; j++) {
			if (board[i][j] == ' ') {
				return 0;
			}
		}
	}
	return 1;
}
char iswin(char board[ROW][COL], int row, int col) {
	int i = 0;
	//横三行
	for (i = 0; i < row; i++) {
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ') {
			return board[i][1];
		}
	}
	//竖三列
	for (i = 0; i < col; i++) {
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ') {
			return board[1][i];
		}
	}
	//判断对角线
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
		return board[1][1];
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
		return board[1][1];
	//判断是否平局
	if (1 == isfull(board, ROW, COL))
	{
		return 'q';
	}
	return 'c';


}